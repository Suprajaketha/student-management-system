name: Dispatch Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'com'
        type: choice
        options:
          - pro
          - stage
          - com

jobs:
  check_and_deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Fetch environment settings
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_PAT }}
          script: |
            const { data: pro } = await github.repos.getEnvironment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment_name: 'pro'
            });

            const { data: stage } = await github.repos.getEnvironment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment_name: 'stage'
            });

            const { data: com } = await github.repos.getEnvironment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment_name: 'com'
            });

            // Extract conditions from environment settings
            const proApprovalsRequired = pro.approvals_required;
            const proTimerDelaySeconds = pro.wait_timer.duration_seconds;
            const stageBypassRules = stage.bypass_rules;
            const comBypassRules = com.bypass_rules;

            // Set outputs based on environment settings
            core.setOutput('pro_approvals_required', proApprovalsRequired);
            core.setOutput('pro_timer_delay_seconds', proTimerDelaySeconds);
            core.setOutput('stage_bypass_rules', stageBypassRules);
            core.setOutput('com_bypass_rules', comBypassRules);

      - name: Deploy based on environment settings
        run: |
          if [[ ${{ github.event.inputs.environment }} == 'pro' ]]; then
            # Check if approvals are required and time delay has passed
            if [[ "${{ steps.check_and_deploy.outputs.pro_approvals_required }}" == 'true' ]]; then
              # Add logic to check for approvals and wait for timer delay
              # Example:
              # Check approvals using GitHub API
              # Wait for timer delay
              echo "Approvals required for pro environment, checking approvals and waiting for timer delay..."
            else
              echo "Approvals not required for pro environment, proceeding with deployment..."
              # Add deployment logic for pro environment
            fi
          elif [[ ${{ github.event.inputs.environment }} == 'stage' ]]; then
            echo "Bypass rules allowed for stage environment, proceeding with deployment..."
            # Add deployment logic for stage environment
          elif [[ ${{ github.event.inputs.environment }} == 'com' ]]; then
            echo "Bypass rules allowed for com environment, proceeding with deployment..."
            # Add deployment logic for com environment
          fi
